/*
-----------CONSIGNA SEGUNDA PARTE DEL PARCIAL----------------------------------
	1- Sustituye uno de los botones por un interruptor deslizante (switch) de dos posiciones. 
  Dependiendo de la posición del interruptor, el display debe mostrar o bien el contador 
  (como en la Parte 1) o los números primos en el rango de 0 a 99.

  2- Investiga un componente electrónico adicional que podría mejorar este proyecto. 
  Proporciona una descripción detallada del componente, su función y cómo se podría integrar en el proyecto.

  3- Agregar uno de los siguientes componentes:
    -Sensordeflexión
    -Sensordefuerza
    -Sensordetemperatura
    
---------------------------------------------------------------------
*/

#define B 13
#define A 12
#define F 11
#define G 10
#define E 7
#define D 6
#define C 5
#define botonIncrementar 4
#define botonReducir 3
#define switchNumerosPrimos 2
#define displayUnidad A4
#define displayDecena A5

#define MOTOR A3
#define TMP A2

int contador = 0;
int decena;
int unidad;
unsigned long tiempoAnterior = 0;
int intervaloDeTiempo = 200;
int divisores;


void encenderSegmento(int sf, int sa, int sb, int sg, int se, int sd, int sc);
void encenderDisplay(int estadoDecena, int estadoUnidades);
void mostrarNumeroDisplay(int contador);

/**
 * Funcion que setea los pines de los display y los botones
 */
void setup()
{
  pinMode(A,OUTPUT);
  pinMode(B,OUTPUT);
  pinMode(C,OUTPUT);
  pinMode(D,OUTPUT);
  pinMode(E,OUTPUT);
  pinMode(F,OUTPUT);
  pinMode(G,OUTPUT);
  pinMode(botonIncrementar, INPUT_PULLUP);
  pinMode(botonReducir, INPUT_PULLUP);
  pinMode(switchNumerosPrimos, INPUT);
  pinMode(displayUnidad, OUTPUT);
  pinMode(displayDecena, OUTPUT);

  pinMode(MOTOR, OUTPUT);
  pinMode(TMP, INPUT);
  Serial.begin(9600);

}

/**
 * comienzo del contador numerico 
*/
void loop(){
  unsigned long tiempoActual = millis();
  if (tiempoActual - tiempoAnterior >= intervaloDeTiempo){
    tiempoAnterior = tiempoActual;

    if (digitalRead(botonIncrementar) == LOW){
      if (contador < 97){
        contador++;
      }
      //--------------------------------------
      if (digitalRead(switchNumerosPrimos) == HIGH){
        contador = calcularPrimoSiguiente(contador);
      }
      //-------------------------------------
    }

    if(digitalRead(botonReducir) == LOW){
      if (contador > 0){
        contador--;
      }
      //--------------------------------------
      if (digitalRead(switchNumerosPrimos) == HIGH){
        contador = calcularPrimoAnterior(contador);
      }
      //--------------------------------------
    }
  }

  int lectura = analogRead(TMP);
  //mapea los valores de lectura
  //se le asigna al valor de lectura 20 = -40°
  //se le asigna al valor de lectura 358 = 125°
  int temperatura = map(lectura, 20, 358, -40, 125);

  if(temperatura >= contador){
    digitalWrite(MOTOR, 1);
  }
  else{
    digitalWrite(MOTOR, 0);
  }

  mostrarNumeroDisplay(contador);
}

/**
 * Funcion que enciende los segmentos según el valor que reciben los parámetros (0, 1)
 * @param sa posicion segmento A.
 * @param sb posicion segmento B.
 * @param sc posicion segmento C.
 * @param sd posicion segmento D.
 * @param se posicion segmento E.
 * @param sf posicion segmento F.
 * @param sg posicion segmento G.
 */
void encenderSegmento(int sf, int sa, int sb, int sg, int se, int sd, int sc)
{
  digitalWrite(F, sf);
  digitalWrite(A, sa);
  digitalWrite(B, sb);
  digitalWrite(G, sg);
  digitalWrite(E, se);
  digitalWrite(D, sd);
  digitalWrite(C, sc);
}

/**
 * Función que establece el orden de display a utilizar
 * @param numero entero que representa el numero a mostrar
 */
void seleccionarNumero(int numero)
{
  switch(numero)
  {
    case 0:
        encenderSegmento(1,1,1,0,1,1,1); 
        break;
    case 1: 
        encenderSegmento(0,0,1,0,0,0,1); 
        break;
    case 2: 
        encenderSegmento(0,1,1,1,1,1,0); 
        break;
    case 3: 
        encenderSegmento(0,1,1,1,0,1,1); 
        break;
    case 4: 
        encenderSegmento(1,0,1,1,0,0,1); 
        break;
    case 5: 
        encenderSegmento(1,1,0,1,0,1,1); 
        break;
    case 6: 
        encenderSegmento(1,1,0,1,1,1,1); 
        break;
    case 7: 
      	encenderSegmento(0,1,1,0,0,0,1); 
        break;
    case 8:
        encenderSegmento(1,1,1,1,1,1,1); 
        break;
    case 9: 
        encenderSegmento(1,1,1,1,0,1,1); 
      break;
  }
}


/**
 * Función que establece el encendido de los display
 * @param estadoDecena estado del display de decenas
 * @param estadoUnidades estado del display de unidades
 */
void encenderDisplay(int estadoDecena, int estadoUnidades)
{
  digitalWrite(displayDecena, estadoDecena);
  digitalWrite(displayUnidad, estadoUnidades);
}


/**
 * Función que calcula el siguiente número primo al proporcionado en el parámetro.
 * @param nuevoNumero entero que representa el número partir del cual se busca el siguiente número primo.
 * @return devuelve un número entero que representa el siguiente número primo mayor o igual al valor proporcionado en nuevoNumero.
 */
int calcularPrimoSiguiente(int nuevoNumero){
  int divisores = 0;
  //bucle de validacion de numero primo
  for (int i=nuevoNumero-1; i<nuevoNumero; i++){
    //calcular cantidad de divisores
    for (int j=2; j<nuevoNumero; j++){
      if (nuevoNumero % j == 0){
        divisores += 1;
      }
    }
    //verificacion de numero primo
    if (divisores != 0){
      nuevoNumero = nuevoNumero + 1;
      divisores = 0;
    }
  }
  return nuevoNumero;
}


/**
 * Función que calcula el anterior número primo al proporcionado en el parámetro.
 * @param nuevoNumero entero que representa el número partir del cual se busca el anterior número primo.
 * @return devuelve un número entero que representa el número primo anterior al valor proporcionado en nuevoNumero.
 */
int calcularPrimoAnterior(int nuevoNumero){
  divisores = 0;
  //bucle de validacion de numero primo
  for (int i = nuevoNumero+1; i>nuevoNumero; i--){
    //calcular cantidad de divisores
    for (int j=2; j<nuevoNumero; j++){
      if (nuevoNumero % j == 0){
        divisores += 1;
      }
    }
    //verificacion de numero primo
    if (divisores != 0){
      nuevoNumero = nuevoNumero - 1;
      divisores = 0;
    }
  }
  return nuevoNumero;
}

/*
* Función que se encarga de mostrar un número en los display de 7 segmentos.
* @param numero número entero que se desea mostrar en los display.
*/
void mostrarNumeroDisplay(int numero){
  int decena = numero / 10;
  int unidad = numero % 10;
  
  seleccionarNumero(decena);
  encenderDisplay(0,1);
  delay(10);
  encenderDisplay(1,1);

  seleccionarNumero(unidad);
  encenderDisplay(1,0);
  delay(10);
  encenderDisplay(1,1);
}
